<h1 class="mb-4">Productos</h1>

<form class="row g-3 mb-4" method="get" action="/products">
  <div class="col-md-4">
    <input type="text" class="form-control" name="query" placeholder="Categoría o 'available'" value="{{queryParams.query}}" />
  </div>
  <div class="col-md-3">
    <select class="form-select" name="sort">
      <option value="">Orden</option>
      <option value="asc" {{#if (eq queryParams.sort "asc")}}selected{{/if}}>Precio asc</option>
      <option value="desc" {{#if (eq queryParams.sort "desc")}}selected{{/if}}>Precio desc</option>
    </select>
  </div>
  <div class="col-md-2">
    <input type="number" class="form-control" name="limit" min="1" placeholder="limit" value="{{queryParams.limit}}" />
  </div>
  <div class="col-md-3">
    <button type="submit" class="btn btn-primary w-100">Aplicar</button>
  </div>
</form>

<div class="row">
  {{#each products}}
    <div class="col-md-4 mb-3">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h5 class="card-title">{{this.title}}</h5>
          <p class="card-text">${{this.price}} - {{this.category}}</p>
          <a href="/products/{{this._id}}" class="btn btn-sm btn-outline-info">Ver detalle</a>
          <button class="btn btn-sm btn-success add-to-cart" data-id="{{this._id}}">
            Agregar al carrito
          </button>
        </div>
      </div>
    </div>
  {{/each}}
</div>

<nav aria-label="Paginación">
  <ul class="pagination justify-content-center">
    {{#if prevLink}}
      <li class="page-item"><a class="page-link" href="{{prevLink}}">« {{prevPage}}</a></li>
    {{/if}}
    <li class="page-item disabled"><span class="page-link">Página {{page}} de {{totalPages}}</span></li>
    {{#if nextLink}}
      <li class="page-item"><a class="page-link" href="{{nextLink}}">{{nextPage}} »</a></li>
    {{/if}}
  </ul>
</nav>

<script>
  async function getOrCreateCart() {
    let cartId = localStorage.getItem("cartId");
    if (!cartId) {
      try {
        const res = await fetch("/api/carts", { method: "POST" });
        const data = await res.json();
        cartId = data._id;
        localStorage.setItem("cartId", cartId);
      } catch (err) {
        console.error("Error creando carrito:", err);
      }
    }
    return cartId;
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const cartId = await getOrCreateCart();

    document.querySelectorAll(".add-to-cart").forEach((btn) => {
      btn.addEventListener("click", async () => {
        const productId = btn.dataset.id;

        try {
          const res = await fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ quantity: 1 })
          });

          if (!res.ok) throw new Error("Error al agregar al carrito");
          alert("Producto agregado al carrito!");
        } catch (err) {
          alert("Error: " + err.message);
        }
      });
    });
  });
</script>